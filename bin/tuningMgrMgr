#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Data::Dumper;
use XML::Simple;
use DBI;
use Getopt::Long qw(GetOptions);
use File::Path qw(make_path remove_tree);
use TuningManager::TuningManager::TuningRegistry;

my ($help, $propFile, $connectInstance, $password, $instance, $family, $svn, $configFile, $dir, $currentEnv, $alwaysUpdateOnly, $schema);
my $props;

my $subcommand = $ARGV[0];

GetOptions("propFile=s" => \$propFile,
           "instance=s" => \$instance,
           "schema=s" => \$schema,
           "connectInstance=s" => \$connectInstance,
           "password=s" => \$password,
           "family=s" => \$family,
           "svn=s" => \$svn,
           "configFile=s" => \$configFile,
           "dir=s" => \$dir,
           "currentEnv!" => \$currentEnv,
           "alwaysUpdateOnly!" => \$alwaysUpdateOnly,
	  );

my $badUsage;

if ($subcommand ne "addinstance" && $subcommand ne "removeinstance"
    && $subcommand ne "list" && $subcommand ne "changesvn"&& $subcommand ne "archiveinstance"
    && $subcommand ne "unarchiveinstance" && $subcommand ne "updateinstance") {
  print STDERR "ERROR: Illegal Subcommand \"$subcommand\".  Should be one of [addinstance | removeinstance | list | changesvn | archiveinstance | unarchiveinstance | updateinstance]\n";
  $badUsage = 1;
}

if (!$propFile && !$password) {
  print STDERR "ERROR: Either the \"-propFile\" or the \"-password\" parameter must be supplied.\n";
  $badUsage = 1;
}

if ($subcommand ne "list" && $subcommand ne "changesvn" && !$connectInstance && !$instance) {
  print STDERR "ERROR: the \"$subcommand\" subcommand requires either \"-connectname\" or \"-instance\" parameter\n";
  $badUsage = 1;
}

if ($subcommand && $subcommand ne "list" && $subcommand ne "addinstance" && $subcommand ne "changesvn" && !$connectInstance && !$instance) {
  print STDERR "ERROR: the \"$subcommand\" subcommand requires either \"-connectname\" or \"-instance\" parameter\n";
  $badUsage = 1;
}

if ($subcommand eq "changesvn" && !$svn) {
  print STDERR "ERROR: the \"$subcommand\" subcommand requires the \"-svn\" parameter\n";
  $badUsage = 1;
}

if ($subcommand eq "changesvn" && !$family) {
  print STDERR "ERROR: the \"$subcommand\" subcommand requires the \"-family\" parameter\n";
  $badUsage = 1;
}

if ($subcommand eq "addinstance") {
  if (!$instance) {
    print STDERR "ERROR: the \"$subcommand\" subcommand requires the \"-instance\" parameter\n";
    $badUsage = 1;
  }

  if (!$family) {
    print STDERR "ERROR: the \"$subcommand\" subcommand requires the \"-family\" parameter\n";
    $badUsage = 1;
  }
}

if ($subcommand eq "updateinstance") {
  if (!$instance) {
    print STDERR "ERROR: the \"$subcommand\" subcommand requires the \"-instance\" parameter\n";
    $badUsage = 1;
  }

  if (!$propFile) {
    print STDERR "ERROR: the \"$subcommand\" subcommand requires the \"-propFile\" parameter\n";
    $badUsage = 1;
  }

  if ($family) {
    print STDERR "ERROR: the \"-family\" parameter cannot be used with the \"$subcommand\" subcommand.\n";
    $badUsage = 1;
  }

  if ($svn) {
    print STDERR "ERROR: the \"-svn\" parameter cannot be used with the \"$subcommand\" subcommand.\n";
    $badUsage = 1;
  }

  if ($connectInstance) {
    print STDERR "ERROR: the \"-connectInstance\" parameter cannot be used with the \"$subcommand\" subcommand.\n";
    $badUsage = 1;
  }
}

if ($badUsage) {
  usage();
  die;
}

  if ($propFile) {
    my $simple = XML::Simple->new();
    $props = $simple->XMLin($propFile);
  }

my $dblink;

if ($props->{dblink}) {
  $dblink = $props->{dblink};
} else {
  $dblink = "\@prodS.login_comment";
}

if (!$connectInstance) {
  if ($instance) {
    $connectInstance = $instance;
  } else {
    $connectInstance = "apicommN";
    $dblink = "";
  }
}

$dblink = "\@" . $dblink
  if ($dblink && !($dblink =~ /^\@/));

my $dbh = getDbHandle($connectInstance, $password);

list($dbh, $dblink) if $subcommand eq "list";

addInstance($dbh, $instance, $family, $svn)
  if $subcommand eq "addinstance";

removeInstance($dbh, $dblink, $instance)
  if $subcommand eq "removeinstance";

changeSvn($dbh, $dblink, $family, $svn)
  if $subcommand eq "changesvn";

archive($dbh, $dblink, $instance, 1)
  if $subcommand eq "archiveinstance";

archive($dbh, $dblink, $instance, 0)
  if $subcommand eq "unarchiveinstance";

updateInstance($dbh, $dblink, $instance, $schema, $configFile, $dir, $currentEnv, $alwaysUpdateOnly)
  if $subcommand eq "updateinstance";

###############################################################################

sub usage {
  print STDERR 
q{
Usage:

tuningMgrMgr addinstance -connectInstance=s -instance=s -family=s [-svn=s] [-password=s | -propFile <FILE>]
tuningMgrMgr removeinstance [-connectInstance=s | -instance=s] [-password=s | -propFile <FILE>]
tuningMgrMgr list [-password=s | -propFile <FILE>]
tuningMgrMgr changesvn -family=s -svn=s [-password=s | -propFile <FILE>]
tuningMgrMgr [archiveinstance | unarchiveinstance] -connectInstance=s
tuningMgrMgr updateinstance -instance <instance> -propFile <XML file> [ -configFile <XML file> ] [ -dir <path> ]

options:
  propFile         pathname of a file containing database username and password, as with tuningManager
  instance         database instance to operate on
  connectInstance  instance to log in to (if different from instance being worked on)
  family           name of family of instances (e.g. "toxo440") to which this instance belongs
  password         database login password
  svn              Subversion trunk/branch info, e.g. "trunk" or "branches/api-aug-08"

Sample prop file:
<tuningProps>
  <password>JoeSentMe</password>
  <username>apidb</username>
</tuningProps>
};
}


sub getDbHandle {
  my ($instance, $password) = @_;
  my $username = 'apidb';

  $password = $props->{password} if !$password;

  my $dsn = "dbi:Oracle:" . $instance;

  my $dbh = DBI->connect(
                $dsn,
                $username,
                $password,
                { PrintError => 1, RaiseError => 0}
                ) or die "Can't connect to the database: $DBI::errstr\n";
  $dbh->{LongReadLen} = 1000000;
  $dbh->{LongTruncOk} = 1;
  return $dbh;
}

sub list {
  my ($dbh, $dblink) = @_;

  my $stmt = $dbh->prepare(<<SQL);
      select ti.instance_nickname,
             replace(replace(tf.subversion_url, 'https://www.cbil.upenn.edu/svn/apidb/ApiCommonData/', ''), '/Load/lib/xml', ''),
             ti.family_name
      from apidb_r.TuningInstance$dblink ti, apidb_r.TuningFamily$dblink tf
      where (ti.archived is null or ti.archived = 0) and
            ti.family_name = tf.family_name(+)
      order by ti.family_name, ti.instance_nickname
SQL

  $stmt->execute()
    or print STDERR $dbh->errstr;

  my $printedSomething;
  my $lastFamily = 'gambino';
  my $instanceCount;
  while (my ($instance, $svn, $family) = $stmt->fetchrow_array()) {
    $instanceCount++;

    print "\n---------family--------- --------instance--------- ---subversion------------\n"
      if !$printedSomething;

    $printedSomething = 1;

# This changes the "family" and "svn" fields to double-quotes ("dittoes") when
# they're the same as the previous value.  This isn't so good when you want to
# grep out a single instance.
#
#    if ($family eq $lastFamily) {
#      $family = "   \"     ";
#      $svn = "   \"     ";
#    } else {
#      $lastFamily = $family;
#    }

    printf "%-24s %-25s %-25s %-32s %-32s\n", $family, $instance, $svn;
  }
  $stmt->finish();

  printf "\n%d instance" . ($instanceCount == 1 ? '' : 's') . " configured\n\n", $instanceCount;
}

sub addInstance {
  my ($dbh, $instance, $family, $svn) = @_;

  # find out whether this family exists
  my $stmt = $dbh->prepare(<<SQL);
      select replace(replace(subversion_url, 'https://www.cbil.upenn.edu/svn/apidb/ApiCommonData/', ''), '/Load/lib/xml', '')
      from apidb_r.TuningFamily\@prodS.login_comment
      where family_name = '$family'
SQL

  $stmt->execute()
    or print STDERR $dbh->errstr;
  my ($existingSvn) = $stmt->fetchrow_array();
  $stmt->finish();

  if ($svn && $existingSvn && $svn ne $existingSvn) {
    # update to new svn
    print "Changing svn configuration from \"$existingSvn\" to \"$svn\" for family \"$family\"\n";
    my $url = svnUrl($svn);
    $dbh->do(<<SQL) or die $dbh->errstr;
      update apidb_r.TuningFamily\@prodS.login_comment
      set subversion_url = '$url'
      where family_name = '$family'
SQL
  } elsif ($svn && !$existingSvn) {
    # insert new family
      my $url = svnUrl($svn);
      $dbh->do(<<SQL) or die $dbh->errstr;
        insert into apidb_r.TuningFamily\@prodS.login_comment (family_name, subversion_url, notify_emails, is_live)
        values ('$family', '$url',
                'TuningMgr\@pcbi.upenn.edu', 1)
SQL
  } elsif (!$svn && !$existingSvn) {
    # new family, but subversion config not supplied
    die "ERROR: Subversion setting (e.g. \"trunk\" or \"branches/api-aug-08\") must be specified (using \"-svn\" parameter) for new family \"$family\"\n"
  }

  # remove old InstanceMetaInfo
  $dbh->do("delete from apidb.InstanceMetaInfo")
    or die $dbh->errstr;

  # add new InstanceMetaInfo
  $dbh->do("insert into apidb.InstanceMetaInfo (instance_nickname) values ('$instance')")
    or die $dbh->errstr;

  # insert new TuningInstance
  $dbh->do(<<SQL) or die $dbh->errstr;
      insert into apidb_r.TuningInstance\@prodS.login_comment
          (instance_nickname, family_name)
      values ('$instance', '$family')
SQL
}

sub removeInstance {
  my ($dbh, $dblink, $instance) = @_;

  # get instance from InstanceMetaInfo, if not supplied
  if (!$instance) {
    my $stmt = $dbh->prepare("select instance_nickname from apidb.InstanceMetaInfo");
    $stmt->execute() or print STDERR $dbh->errstr;
    ($instance) = $stmt->fetchrow_array();
    $stmt->finish();
  }

  # get family name
  my $stmt = $dbh->prepare(<<SQL);
    select family_name from apidb_r.TuningInstance$dblink
    where instance_nickname = '$instance'
SQL
  $stmt->execute() or print STDERR $dbh->errstr;
  my ($family) = $stmt->fetchrow_array();
  $stmt->finish();

  # remove instance
  my $rowCount = $dbh->do(<<SQL) or die $dbh->errstr;
    delete from apidb_r.TuningInstance$dblink
    where instance_nickname = '$instance'
SQL

  printf "removed %d " . ($rowCount == 1 ? "instance" : "instances") . ", named \"$instance\", from the family \"$family\"\n", $rowCount;

  # is this the last member of the family?
  my $stmt = $dbh->prepare("select count(*) from apidb_r.TuningInstance$dblink where family_name = '$family'");
  $stmt->execute() or print STDERR $dbh->errstr;
  my ($familyCount) = $stmt->fetchrow_array();
  $stmt->finish();

  # if so, remove the family
  if (!$familyCount) {
    $dbh->do("delete from apidb_r.TuningFamily$dblink where family_name = '$family'")
      or die $dbh->errstr;
  }
}

sub changeSvn {
   my ($dbh, $dblink, $family, $svn) = @_;

   # set svn, based on family
   my $url = svnUrl($svn);
   my $familyCount = $dbh->do(<<SQL);
     update apidb_r.TuningFamily$dblink
       set subversion_url = '$url'
       where family_name = '$family'
SQL
  printf "updated subversion URL to \"$url\" (from config of \"$svn\") for %d "
    . (($familyCount == 1) ? "family" : "families") . " named \"$family\".\n", $familyCount;
}

sub svnUrl {
  my ($svn) = @_;
  return "https://www.cbil.upenn.edu/svn/apidb/ApiCommonData/$svn/Load/lib/xml"
}

sub archive {
  my ($dbh, $dblink, $instance, $archiveFlag) = @_;

  my $rowCount = $dbh->do(<<SQL) or die $dbh->errstr;
     update apidb_r.TuningInstance$dblink
       set archived = $archiveFlag
  where instance_nickname = '$instance'
SQL

  printf "set \"archived\" to " . $archiveFlag . " for " . $rowCount . ($rowCount == 1 ? " instance" : " instances") . ", named \"$instance\"\n";
}

sub updateInstance {
  my ($dbh, $dblink, $instance, $schema, $configFile, $dir, $currentEnv, $alwaysUpdateOnly) = @_;

  my $tmpDir;

  my $tuningRegistry =
    TuningManager::TuningManager::TuningRegistry->new($dbh, $dblink);

  my $svn = $tuningRegistry->getSubversionUrl();
  if ($svn =~ /ApiCommonData\/(.*)\/Load\/lib/) {
    $svn = $1;
  }

  if (! $svn) {
    print STDERR "for instance \"$instance\" getSubversionUrl() returns \"" . $tuningRegistry->getSubversionUrl() . "\"\n";
    die "\$svn undefined";
  }

  if ($currentEnv) {
    # use current GUS environment
    $dir = `dirname $ENV{GUS_HOME}`;
    chomp $dir;

    die "GUS environment not set up" unless $dir;
  }

  if (!$dir) {
    # if no dir was supplied, create one
    $tmpDir = 1;
    $dir = "/tmp/tMan." . $$ . "." . time . "/";

    make_path("$dir/project_home", "$dir/gus_home/lib/java/db_driver");
    system("cp $ENV{GUS_HOME}/lib/java/db_driver/* $dir/gus_home/lib/java/db_driver");
    chdir "$dir/project_home";
    system("svn checkout https://www.cbil.upenn.edu/svn/gus/install/trunk install");
    system("svn checkout https://www.cbil.upenn.edu/svn/apidb/ApiCommonShared/$svn ApiCommonShared");
    system("svn checkout https://www.cbil.upenn.edu/svn/gus/WDK/$svn WDK");
    system("svn checkout https://www.cbil.upenn.edu/svn/gus/FgpUtil/$svn FgpUtil");
    system("svn checkout https://www.cbil.upenn.edu/svn/gus/WSF/$svn WSF");
    system("svn checkout https://www.cbil.upenn.edu/svn/gus/CBIL/$svn CBIL");
    system("svn checkout https://www.cbil.upenn.edu/svn/gus/ReFlow/$svn ReFlow");
    system("svn checkout https://www.cbil.upenn.edu/svn/gus/TuningManager/$svn TuningManager");
    system("svn checkout https://www.cbil.upenn.edu/svn/apidb/EuPathPresenters/$svn EuPathPresenters");
    system("svn checkout https://www.cbil.upenn.edu/svn/apidb/EuPathDatasets/$svn EuPathDatasets");

    writeGusConfigFile($dir, $instance);

  } else {
    # using an existing directory; get it up to date
    chdir "$dir/project_home";
    system("svn switch https://www.cbil.upenn.edu/svn/gus/install/$svn install");
    system("svn switch https://www.cbil.upenn.edu/svn/apidb/ApiCommonShared/$svn ApiCommonShared");
    system("svn switch https://www.cbil.upenn.edu/svn/gus/WDK/$svn WDK");
    system("svn switch https://www.cbil.upenn.edu/svn/gus/FgpUtil/$svn FgpUtil");
    system("svn switch https://www.cbil.upenn.edu/svn/gus/WSF/$svn WSF");
    system("svn switch https://www.cbil.upenn.edu/svn/gus/CBIL/$svn CBIL");
    system("svn switch https://www.cbil.upenn.edu/svn/gus/ReFlow/$svn ReFlow");
    system("svn switch https://www.cbil.upenn.edu/svn/gus/TuningManager/$svn TuningManager");
    system("svn switch https://www.cbil.upenn.edu/svn/apidb/EuPathPresenters/$svn EuPathPresenters");
    system("svn switch https://www.cbil.upenn.edu/svn/apidb/EuPathDatasets/$svn EuPathDatasets");
  }

  # build and run
  my $doUp = "-doUpdate";
  if ($alwaysUpdateOnly) {
    $doUp = ""; # -doUpdate controls non-AlwaysUpdate tables
  }

  my $cmd = "tuningManager $doUp -instance $instance -propfile $propFile -notifyEmail TuningMgr\@pcbi.upenn.edu";
  $schema = $props->{schema} if !$schema;
  $cmd .= " -schema " . $schema;
  $cmd .= " -configFile " . getConfigFileName($configFile, $tuningRegistry, $dir);


  system("source $dir/project_home/install/bin/gusEnv.bash -local; bld ApiCommonShared; bld TuningManager; propertiesFromDatasets EuPathDatasets");
  print "\$cmd = \"$cmd\"\n";
  system("source $dir/project_home/install/bin/gusEnv.bash -local; $cmd");
  my $exitCode = $? >> 8;
  if ($exitCode) {
    print STDERR "tuningManager exits with error code $exitCode\n";
    print STDERR "leaving temporary directory $dir\n"
      if ($tmpDir);
  } else {
    # clean up
    print STDERR "cleaning up temporary directory $dir\n";
    remove_tree($dir)
      if ($tmpDir);
  }

  # remove tmp directories more than 7 days old
  print STDERR "cleaning up tuning-manager temp directories more than 7 days old\n";
  system("find /tmp/ -maxdepth 1 -name 'tMan.*' -mtime +7 -exec rm -rf {} \;");
}

sub writeGusConfigFile {

  my ($dir, $instance) = @_;

  my $login = $props->{schema};
  my $password = $props->{password};
  my $dsn = "dbi:Oracle:$instance";

  mkdir ("$dir/gus_home/config");

  system (<<SYSTEM);
    cat $dir/project_home/install/gus.config.sample | \
    substitute '<dbVendor>' Oracle | \
    substitute '<dbiDsn>' "$dsn" | \
    substitute '<dbLogin>' "$login" | \
    substitute '<dbPassword>' "$password" | \
    cat > $dir/gus_home/config/gus.config
SYSTEM

}

sub getConfigFileName {
  my ($configFile, $tuningRegistry, $dir) = @_;

  my $configPath;

  # if no config file was supplied, use one from Subversion
  if (!$configFile) {
    $configFile = $tuningRegistry->getConfigFile();

    # default to component tuning manager
    $configFile = "tuningManager.xml" if !$configFile; 
    $configPath = "$dir/gus_home/lib/xml/tuningManager/" . $configFile;
    return $configPath;
  } elsif (substr($configFile, 0, 1) ne "/") {
    # if a relative pathname is given, look under gus_home/lib/xml
    $configPath = "$dir/gus_home/lib/xml/tuningManager/" . $configFile;
    return $configPath;
  } else {
    # absolute path? Use as is.
    return $configFile;
  }

}


